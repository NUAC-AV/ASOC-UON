import numpy as np
import matplotlib.colors as mcolors
import colorsys
import osmnx as ox
from shapely.geometry import shape
import folium


class MapUtils:
    @staticmethod
    def adjust_brightness(color, factor):
        """ Adjusts brightness of a given color by the provided factor. """
        color = np.array(mcolors.to_rgb(color))
        adjusted_color = np.clip(color * factor, 0, 1)
        return mcolors.to_hex(adjusted_color)

    @staticmethod
    def adjust_hue(color, hue_factor):
        """ Adjusts the hue of a given color by the provided factor. """
        color = np.array(mcolors.to_rgb(color))
        h, l, s = colorsys.rgb_to_hls(*color)
        new_h = (h + 0.5 * hue_factor) % 1.0
        adjusted_color = colorsys.hls_to_rgb(new_h, l, s)
        return mcolors.to_hex(adjusted_color)

    @staticmethod
    def geocode_places(base_places, location="Newcastle, Australia"):
        """ Geocodes a list of places to their geographical coordinates. """
        regions = []
        for base_group in base_places:
            places = [f"{place}, {location}" for place in base_group]
            region = ox.geocode_to_gdf(places)
            regions.append(region)
        return regions
    

    
    def generate_suburb_data(map_object, base_places, location="Newcastle, Australia"):
        """
        Generates suburb data for recentering based on GeoJSON data.

        :param map_object: The Folium map object.
        :param base_places: A list of lists containing suburb names.
        :param location: The default location for geocoding the suburbs.
        :return: List of tuples with (suburb_name, feature_group_variable_name, coordinates).
        """
        suburb_data = []
        
        # Get GeoJSON data for all suburbs using the static method correctly
        regions = MapUtils.geocode_places(base_places, location)

        for region, base_group in zip(regions, base_places):
            for idx, row in region.iterrows():
                suburb_name = row['display_name'].split(",")[0]  # Adjust to get the suburb name correctly
                geometry = row['geometry']

                # Create a feature group for the suburb
                feature_group = folium.FeatureGroup(name=suburb_name)

                # Add the GeoJSON to the feature group
                folium.GeoJson(geometry).add_to(feature_group)

                # Add the feature group to the map
                feature_group.add_to(map_object)

                # Calculate the centroid of the suburb
                centroid = geometry.centroid
                center_coordinates = (centroid.y, centroid.x)  # (latitude, longitude)

                # Store the suburb data
                suburb_data.append((
                    suburb_name,
                    feature_group.get_name(),  # This retrieves the feature group variable name
                    center_coordinates
                ))

        return suburb_data
    

    def add_recenter_js_to_html(filename, suburb_data):
        """
        Adds JavaScript to recenter the map when specific suburb layers are selected.

        :param filename: Path to the HTML file to which the JS will be added.
        :param suburb_data: List of tuples with (suburb_name, feature_group_variable_name, coordinates).
        """
        # Read the HTML file content
        with open(filename, 'r') as file:
            html_as_string = file.read()

        # Get the map ID generated by Folium (usually it is 'map' but may vary)
        map_id = "map_" + html_as_string.split('id="map_', 1)[1].split('"', 1)[0]

        # Prepare the JavaScript to recenter the map on layer selection
        recenter_js = f"""
        <script>
        document.addEventListener('DOMContentLoaded', function() {{
            var map = {map_id};  // Access the Leaflet map instance by its ID
        """

        # Generate the JavaScript for each suburb to recenter the map when its layer is selected
        recenter_js += """
            map.on('overlayadd', function(e) {
        """

        for suburb_name, feature_group_var, coordinates in suburb_data:
            recenter_js += f"""
                if (e.layer === {feature_group_var}) {{
                    map.setView([{coordinates[0]}, {coordinates[1]}], 13, {{
                        animate: true,
                        pan: {{duration: 1}}
                    }});
                }}
            """

        # Close the script tags
        recenter_js += """
            });
        });
        </script>
        """

        # Insert the JavaScript code before the closing </body> tag
        insertion_index = html_as_string.rfind('</body>')
        updated_html = html_as_string[:insertion_index] + recenter_js + html_as_string[insertion_index:]

        # Write the updated HTML back to the file
        with open(filename, 'w') as file:
            file.write(updated_html)

        print("Recenter JavaScript added successfully.")
